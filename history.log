ff637fb2-924f-482a-9eb3-2c54b5818f3e:1739089859440:37:S:SELECT * FROM MyTable;
392ad9b9-c426-4e3a-824d-baa3aa538d7e:1739089870160:4:S:SELECT * FROM MyTable;
fe394584-4eec-4c1c-a373-059f6c1f3d7b:1739090021449:421:S:BEGIN\n  FOR i IN 1..10000 LOOP\n    INSERT INTO MyTable (id, val)\n    VALUES (\n      i,  -- для id используем счетчик цикла\n      TRUNC(DBMS_RANDOM.VALUE(1, 1000))  -- случайное целое число от 1 до 1000\n    );\n  END LOOP;\n  COMMIT;  -- фиксируем изменения\nEND;\n/
d183ef5d-6824-470d-8809-fe709a70ebc1:1739090326242:17:S:SELECT * FROM MyTable WHERE ROWNUM <= 5;
deabe9c1-b6e6-425b-8a1b-0ab75aa22019:1739090414130:119:S:CREATE OR REPLACE FUNCTION check_even_odd_count \nRETURN VARCHAR2 IS\n    v_even_count NUMBER;\n    v_odd_count NUMBER;\nBEGIN\n    -- Подсчитываем количество четных чисел\n    SELECT COUNT(*) INTO v_even_count\n    FROM MyTable\n    WHERE MOD(val, 2) = 0;\n    \n    -- Подсчитываем количество нечетных чисел\n    SELECT COUNT(*) INTO v_odd_count\n    FROM MyTable\n    WHERE MOD(val, 2) = 1;\n    \n    -- Сравниваем и возвращаем результат\n    IF v_even_count > v_odd_count THEN\n        RETURN 'TRUE';\n    ELSIF v_odd_count > v_even_count THEN\n        RETURN 'FALSE';\n    ELSE\n        RETURN 'EQUAL';\n    END IF;\nEND;\n/
066660bc-e1d7-4527-92c9-39436f9e80a6:1739090426797:11:S:BEGIN\n    DBMS_OUTPUT.PUT_LINE('Результат: ' || check_even_odd_count());\nEND;\n/
bc188120-8c20-4abb-a113-f03bac8c2436:1739090480211:0:S:SET SERVEROUTPUT ON;
da3b4ef9-c8dc-490c-95c0-7d126557c1e9:1739090480297:5:S:BEGIN\n    DBMS_OUTPUT.PUT_LINE('Результат: ' || check_even_odd_count());\nEND;\n/
dbd5c536-53aa-4a7e-9d92-468868bb46c3:1739090492820:0:S:SET SERVEROUTPUT ON;
a5d178d2-6a08-4cba-a3aa-b19dd1a43c35:1739090492876:6:S:BEGIN\n    DBMS_OUTPUT.PUT_LINE('Result: ' || check_even_odd_count());\nEND;\n/
6ad6785c-8751-473b-9d32-ce11107d17ad:1739090725729:12:S:CREATE OR REPLACE FUNCTION generate_insert_command(p_id IN NUMBER)\nRETURN VARCHAR2 IS\n    v_val NUMBER;\n    v_insert_command VARCHAR2(200);\nBEGIN\n    -- Получаем значение val для указанного id\n    SELECT val INTO v_val\n    FROM MyTable\n    WHERE id = p_id;\n    \n    -- Формируем команду INSERT\n    v_insert_command := 'INSERT INTO MyTable (id, val) VALUES (' || \n                       p_id || ', ' || \n                       v_val || ');';\n    \n    RETURN v_insert_command;\n    \nEXCEPTION\n    WHEN NO_DATA_FOUND THEN\n        RETURN 'Error: No record found with ID = ' || p_id;\n    WHEN OTHERS THEN\n        RETURN 'Error: ' || SQLERRM;\nEND;\n/
641e0a7e-b7df-4253-b3a3-7c0dc8ca7bb3:1739090747803:0:S:SET SERVEROUTPUT ON;
d1e92aca-b628-4340-8fc5-1e06b35ac5d5:1739090747904:8:S:BEGIN\n    -- Проверим для существующего ID (например, 1)\n    DBMS_OUTPUT.PUT_LINE(generate_insert_command(1));\n    \n    -- Проверим для несуществующего ID\n    DBMS_OUTPUT.PUT_LINE(generate_insert_command(99999));\nEND;\n/
f0d7180d-3e22-43cb-bd9a-dcbd462d1756:1739090817852:27:S:CREATE OR REPLACE PROCEDURE insert_mytable(\n    p_id IN NUMBER,\n    p_val IN NUMBER\n) IS\nBEGIN\n    INSERT INTO MyTable (id, val)\n    VALUES (p_id, p_val);\n    COMMIT;\n    DBMS_OUTPUT.PUT_LINE('Record successfully inserted');\nEXCEPTION\n    WHEN DUP_VAL_ON_INDEX THEN\n        DBMS_OUTPUT.PUT_LINE('Error: Duplicate ID');\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\n        ROLLBACK;\nEND;\n/
5f2f0ab7-4843-44cf-8d9f-b7a042395c16:1739090842569:11:S:CREATE OR REPLACE PROCEDURE update_mytable(\n    p_id IN NUMBER,\n    p_val IN NUMBER\n) IS\nBEGIN\n    UPDATE MyTable\n    SET val = p_val\n    WHERE id = p_id;\n    \n    IF SQL%ROWCOUNT = 0 THEN\n        DBMS_OUTPUT.PUT_LINE('No record found with ID = ' || p_id);\n    ELSE\n        DBMS_OUTPUT.PUT_LINE('Record successfully updated');\n        COMMIT;\n    END IF;\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\n        ROLLBACK;\nEND;\n/
1606dd39-0a7b-499d-b25d-969d4de32d9a:1739090896390:10:S:CREATE OR REPLACE PROCEDURE delete_mytable(\n    p_id IN NUMBER\n) IS\nBEGIN\n    DELETE FROM MyTable\n    WHERE id = p_id;\n    \n    IF SQL%ROWCOUNT = 0 THEN\n        DBMS_OUTPUT.PUT_LINE('No record found with ID = ' || p_id);\n    ELSE\n        DBMS_OUTPUT.PUT_LINE('Record successfully deleted');\n        COMMIT;\n    END IF;\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\n        ROLLBACK;\nEND;\n/
90cc1e67-5b15-4a15-a695-0ed189412aaf:1739090950913:0:S:SET SERVEROUTPUT ON;
26db8780-8450-467c-8951-a8909820cf8f:1739090951088:7:S:BEGIN\n    -- Тестируем INSERT\n    insert_mytable(10001, 777);\n    \n    -- Тестируем UPDATE\n    update_mytable(10001, 888);\n    \n    -- Тестируем DELETE\n    delete_mytable(10001);\n    \n    -- Проверяем несуществующий ID\n    update_mytable(99999, 999);\nEND;\n/
2d1ddabb-d388-4df8-80c2-081573804a98:1739091073156:12:S:CREATE OR REPLACE FUNCTION calculate_yearly_reward(\n    p_monthly_salary IN NUMBER,\n    p_bonus_percent IN NUMBER\n) RETURN NUMBER IS\n    v_total_reward NUMBER;\n    v_bonus_decimal NUMBER;\nBEGIN\n    -- Проверка на NULL\n    IF p_monthly_salary IS NULL OR p_bonus_percent IS NULL THEN\n        RAISE_APPLICATION_ERROR(-20001, 'Salary and bonus percent cannot be NULL');\n    END IF;\n    \n    -- Проверка на отрицательные значения\n    IF p_monthly_salary < 0 THEN\n        RAISE_APPLICATION_ERROR(-20002, 'Salary cannot be negative');\n    END IF;\n    \n    -- Проверка на разумные пределы процента премии (например, от 0 до 100)\n    IF p_bonus_percent < 0 OR p_bonus_percent > 100 THEN\n        RAISE_APPLICATION_ERROR(-20003, 'Bonus percentage must be between 0 and 100');\n    END IF;\n    \n    -- Преобразование процента в десятичную дробь\n    v_bonus_decimal := p_bonus_percent / 100;\n    \n    -- Расчет годового вознаграждения\n    v_total_reward := (1 + v_bonus_decimal) * 12 * p_monthly_salary;\n    \n    RETURN v_total_reward;\nEND;\n/
ead9c3dd-7a96-4c7c-a434-a75b3f6cea6b:1739091085382:0:S:SET SERVEROUTPUT ON;
7975cfb8-fc44-44b1-aa78-ac128c918095:1739091085821:4:S:BEGIN\n    -- Тест с корректными данными\n    DBMS_OUTPUT.PUT_LINE('Yearly reward for salary 50000 and bonus 20%: ' || \n        calculate_yearly_reward(50000, 20));\n        \n    -- Тест с нулевым бонусом\n    DBMS_OUTPUT.PUT_LINE('Yearly reward for salary 50000 and bonus 0%: ' || \n        calculate_yearly_reward(50000, 0));\n    \n    -- Тест с некорректными данными (раскомментируйте для проверки)\n    -- DBMS_OUTPUT.PUT_LINE(calculate_yearly_reward(-1000, 20));  -- Отрицательная зарплата\n    -- DBMS_OUTPUT.PUT_LINE(calculate_yearly_reward(1000, 150));  -- Процент больше 100\n    -- DBMS_OUTPUT.PUT_LINE(calculate_yearly_reward(NULL, 20));   -- NULL значение\nEND;\n/
